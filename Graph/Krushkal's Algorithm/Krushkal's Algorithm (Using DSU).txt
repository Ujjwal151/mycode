//Krushkal's Algorithm
#include <bits/stdc++.h>
using namespace std;
const int N = 1e6+10;
int parent[N];
int size[N];

void make(int v){
	parent[v] = v;
	size[v] = 1;
}

int find(int v){
	if(v == parent[v]) return v;
	parent[v] = find(parent[v]);
	return parent[v];
}

void dsu(int a, int b){
	a = find(a);
	b = find(b);
	if(a != b){
		if(a < b) swap(a,b);
		parent[b] = a;
		size[a] += size[b];
	}
}

int main() 
{
	freopen("input.txt", "r", stdin); 
    freopen("output.txt", "w", stdout);
	int n, m;
	cin>>n>>m;

    vector<pair<int, pair<int,int> > > edges;
    for(int i = 0; i<m; i++)
    {
        int u,v,w;
        cin>>u>>v>>w;
        edges.push_back({w,{u,v}});
    }
    sort(edges.begin(), edges.end());
    for(int i = 1; i<=n; i++) make(i);

    int cost = 0;
    for(auto &edge: edges)
    {
        int w = edge.first;
        int u = edge.second.first;
        int v = edge.second.second;

        if(find(u) == find(v)) continue;
        dsu(u,v);
        cost += w;
        cout<<u<<" "<<v<<"\n";
    }
	cout<<cost;
}

/*
Input
6 9
5 4 9
1 4 1
5 1 4
4 3 5
4 2 3
1 2 2
3 2 3
3 6 8
2 6 7
Output
1 4
1 2
3 2
5 1
2 6
17
*/