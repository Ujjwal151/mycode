//Dijkstra | BFS | SHortest Path from source to distance
//https://www.hackerearth.com/problem/algorithm/dijkstras/
#include <bits/stdc++.h>
using namespace std;
#define INF 1e9+7

void Path(vector<int> &parent, int des)
{
	stack<int> stk;
	while(des != -1)
	{
		stk.push(des);
		des = parent[des];
	}
	while(!stk.empty())
	{
		cout<<stk.top()<<" ";
		stk.pop();
	}
	cout<<"\n";
}

void dijkstra(int src, int des, int n, vector<pair<int,int> > g[])
{
	vector<int> dis(n,INF);
	vector<bool> vis(n,0);
	set<pair<int,int>> st;
	vector<int> parent(n, -1);

	dis[src] = 0;
	st.insert({dis[src],src});

	while(st.size()>0)
	{
		int u = (*st.begin()).second;
		st.erase(st.begin());

		if(vis[u] == 1) continue;
		vis[u] = 1;

		for(auto child : g[u])
		{
			int v = child.first;
			int wt = child.second;
			if(dis[u] + wt < dis[v])
			{
				dis[v] = dis[u] + wt;
				st.insert({dis[v], v});
				parent[v] = u;
			}
		}
	}

	cout<<dis[des]<<"\n";
	Path(parent,des);
	
}

int main() 
{
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	
	int t; cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		vector<pair<int,int> > g[n];
		for(int i = 0; i<n; i++)
		{
			for(int j = 0; j<n; j++)
			{
				int wt; cin>>wt;
				if(wt>0){
					g[i].push_back({j,wt});
				}
			}
		}

		int src, des;
		cin>>src>>des;
		dijkstra(src,des,n,g);
	}	
}

/*
input
1
5
0 3 2 0 0
3 0 5 3 0
2 5 0 0 20
0 3 0 0 4
0 0 20 4 0
0 4
output
10
0 1 3 4
*/