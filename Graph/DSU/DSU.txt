//Disjoint Set Union (DSU)
//Number of connected components
#include <bits/stdc++.h>
using namespace std;
const int N = 1e3+10;
int parent[N];
int size[N];

void make(int v){
	parent[v] = v;
	size[v] = 1;
}

int find(int v){
	if(v == parent[v]) return v;
	parent[v] = find(parent[v]);
	return parent[v];
}

void dsu(int a, int b){
	a = find(a);
	b = find(b);
	if(a != b){
		if(a < b) swap(a,b);
		parent[b] = a;
		size[a] += size[b];
	}
}


int main() 
{
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	int n, m;
	cin>>n>>m;

	for(int i = 1 ; i<=n; i++){
		make(i);
	}

	while(m--){
		int u,v;
		cin>>u>>v;
		dsu(u,v);
	}

	int cnt = 0;
	for(int i = 1; i<=n; i++){
		if(parent[i] == i)
		cnt++;
	}

	cout<<cnt;
}

/*
input
7 5

1 2
6 4
4 5
4 6
7 3

Output
3
*/