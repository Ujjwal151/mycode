//bfs implementation
#include<bits/stdc++.h>
using namespace std;

const int N = 1e5;
vector<int> adj[N]; 
vector<bool>vis(N);
vector<int> level(N);

void bfs(int s)
{
    queue<int> q;
    q.push(s); 
    vis[s] = 1; level[s] = 0;

    while (!q.empty())
    {
        int u = q.front(); q.pop();
        cout<<u<<"\n";
        //cout<<level[u]<<"\n";
        for(auto v: adj[u]){
            if(vis[v]) continue;
            q.push(v);
            vis[v] = 1;
            level[v] = level[u] + 1;
        }
    }
}


int main()
{   
    freopen("input.txt", "r", stdin); 
    freopen("output.txt", "w", stdout);
    int n, e;
    cin>>n>>e;
    for(int i = 0; i<e; i++){
        int u, v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    bfs(1);

    for(int i = 1; i<=n; i++)
    {
        // cout<<i<<" "<<level[i]<<"\n";
    }
}

/*
Input
9
10
1 2
1 3

2 4
2 5

3 6
3 7
3 8

4 5
5 9
6 9

Output
1
2
3
4
5
6
7
8
9
*/
