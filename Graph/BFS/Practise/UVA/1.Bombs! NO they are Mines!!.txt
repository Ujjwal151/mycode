//https://onlinejudge.org/index.php?option=onlinejudge&Itemid=8&category=18&page=show_problem&problem=1594
//UVA 10653 Bombs! NO they are Mines!!
//Using BFS | Converting 2D array to 1D array.
#include<bits/stdc++.h>
using namespace std;
const int N = 1000;
int R,C;            // Number of ROW and Number of Column
vector<int> g[N*N]; //List of size N*N
vector<int> level(N*N); 

bool isValid(int idx)
{
    int x = idx/N;  // Getting the Row number
    int y = idx%N;  //Getting the column number
    return x>=0 && y>=0 && x<R && y<C && level[idx] == -1;
}

int bfs(int src, int des)
{
    queue<int> q;
    q.push(src); level[src] = 0;

    while(!q.empty())
    {
        int node = q.front();
        q.pop();

        vector<int> itr = {1,-1,N,-N};
        for(int i : itr) 
            if(isValid(node+i)) g[node].push_back(node+i);
    
        for(auto child : g[node])
        {
            q.push(child);
            level[child] = level[node]+1;
            if(child == des) return level[child];
        }
    }
}

int main() 
{ 
    freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    while(true)
    {
        cin>>R>>C;
        if(!R & !C) return 0;
        fill(level.begin(), level.end(), -1);
        int ROW; cin>>ROW;
        for(int i = 0; i<ROW; i++)
        {
            int r_no; cin>>r_no;
            int bomb; cin>>bomb;
            for(int j = 0; j<bomb; j++)
            {
                int c_no; cin>>c_no;
                level[r_no*N + c_no] = -2;
            }
        }
        int sx, sy, dx, dy;
        cin>>sx>>sy>>dx>>dy;
        int src = sx*N + sy;
        int des = dx*N + dy;
        cout<<bfs(src,des)<<"\n";
    }
}

/*
Input
10 10
9
0 1 2
1 1 2
2 2 2 9
3 2 1 7
5 3 3 6 9
6 4 0 1 2 7
7 3 0 3 8
8 2 7 9
9 3 2 3 4
0 0
9 9

5 4
3
0 1 3
1 1 2
2 2 1 2
0 0
1 3

0 0

Output
18
8
*/