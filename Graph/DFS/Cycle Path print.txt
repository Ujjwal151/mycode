//Cycle path print
//CSES : ROUND TRIP
//https://cses.fi/problemset/task/1669
#include<bits/stdc++.h>
using namespace std;

const int N = 1e5 + 10;
vector< vector<int> > adj(N);
vector<bool> vis(N);
vector<int> par(N);

int dfs(int u, int parent){
    vis[u] = 1;
    par[u] = parent;
    // cout<<u<<"\n";
    for(auto v: adj[u]){
        if(!vis[v]){
            int retV = dfs(v,u);
            if(retV) return retV;
        }
        else if(v != parent){
            // cout<<u<<" "<<v<<"\n";
            par[v] = u;
            return v;
        }
    }
    return 0;
}

void print_cycle(int point)
{
    int des = point;
    vector<int> ans = {point};
    while(par[des] != point)
    {
        des = par[des];
        ans.push_back(des);
    }
    ans.push_back(point);
    cout<<ans.size()<<"\n";
    for(int i = 0; i<ans.size(); i++)
    {
        cout<<ans[i]<<" ";
    }
    cout<<"\n";
}

int main() 
{ 

    ios_base::sync_with_stdio(false), cin.tie(NULL);
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    int n,m;
    cin>>n>>m;

    for(int i = 0; i<m; i++)
    {
        int u, v; cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u); // For undirected graph
    }

    for(int u = 1; u<=n; u++){ //1 to n
        if(!vis[u]){
            int cyclePoint = dfs(u,-1);
            if(cyclePoint)
            {
                print_cycle(cyclePoint);
                return 0;
            } 
        }
    }

    cout<<"IMPOSSIBLE\n";
return 0;    
}

/*
Input
3 3
1 2
2 3
1 3
Output
4
1 3 2 1 
*/

/*
Input
10
9
1 2
2 3
4 5
4 6
6 7
6 8
7 8
8 9
9 10
output
4
6 8 7 6 
*/


/*
Input
10
8
1 2
2 3
4 5
4 6
6 7
7 8
8 9
9 10
Output
IMPOSSIBLE
*/