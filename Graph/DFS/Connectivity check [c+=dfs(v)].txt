//Connectivity check works both Directed & Undirected using DFS
//if(number_of_visited_node == Number_of_Total_nodes) connected
#include<bits/stdc++.h>
using namespace std;

const int N = 1e5;
vector<int> adj[N];
vector<bool> vis(N);

int dfs(int src)
{
    vis[src] = 1;
    // cout<<src<<"\n";
    int cnt = 0;
    for(auto child: adj[src])
    {
       if(vis[child]) continue;
       cnt += dfs(child);
    }
    return 1 + cnt;
}

int main() 
{ 
    freopen("input.txt", "r", stdin); 
    freopen("output.txt", "w", stdout);
    int n,e;
    cin>>n>>e;

    for(int i = 0; i<e; i++)
    {
        int x, y;
        cin>>x>>y;
        adj[x].push_back(y);
        adj[y].push_back(x); // For undirected graph
    }

    int cnt = dfs(1); //Stating from any node
    // cout<<"Node visited = "<<cnt<<"\n";
    //check all nodes visited by single dfs call
    if(cnt == n) cout<<"Connected"; 
    else cout<<"Disconnected";
}

/*
Input
9
8
1 2

2 4
2 5

3 6
3 7
3 8

4 5
5 9

Output
Node visited = 5
Disconnected
*/



/*
Input
9
10
1 2
1 3

2 4
2 5

3 6
3 7
3 8

4 5
5 9
6 9

Output
Node visited = 9
Connected
*/