//Count Connected Component cnt using n dfs call 
//Check connectivity : if cnt = 1 connected
#include<bits/stdc++.h>
using namespace std;

const int N = 1e5;
vector<int> adj[N];
vector<bool> vis(N);

void dfs(int u){
    vis[u] = 1;
    // cout<<u<<"\n";
    for(auto v: adj[u]){
       if(vis[v]) continue;
       dfs(v);
    }
}

int Connected_Component(int n){
    int cnt = 0;
    for(int u = 1; u<=n; u++){
        if(!vis[u]){
            dfs(u);
            ++cnt;
        }
    }
    return cnt;
}

int main() 
{ 
    freopen("input.txt", "r", stdin); 
    freopen("output.txt", "w", stdout);
    int n,e;
    cin>>n>>e;

    for(int i = 0; i<e; i++)
    {
        int u, v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u); // For undirected graph
    }

    int cnt = Connected_Component(n);
    if(cnt == 1){
        cout<<"Connected\n";
        cout<<"No of con com = 1";
    }
    else{
        cout<<"Disconnected!\n";
        cout<<"No of con com = "<<cnt<<"\n";
    }    
}

/*
Input
8
8
1 2
1 3

2 4
2 5

3 6
3 7
3 8

4 5

Output
Connected
No of con com = 1
*/


/*
Input
8
7
1 3

2 4
2 5

3 6
3 7
3 8

4 5

Output
Disconnected!
No of con com = 2
*/