//All pair shortest Path
//Floyd Warshal Algorithm

#include <bits/stdc++.h>
using namespace std;
const int N = 1e3+10;
#define INF 100

vector<vector<int> > g(N, vector<int> (N, INF));

void print(int n)
{
	for(int i = 1; i<=n; i++)
	{
		for(int j = 1; j<=n; j++)
		{
			cout<<g[i][j]<<" ";
		}
		cout<<"\n";
	}
}

void floyd(int n)
{
	for(int i = 1; i<=n; i++){
		g[i][i] = 0;
	}

	for(int k = 1; k<=n; k++)
	{
		for(int i = 1; i<=n; i++)
		{
			for(int j = 1; j<=n; j++)
			{
				if(g[i][k] != INF && g[k][j] != INF)
				g[i][j] = min(g[i][j], g[i][k] + g[k][j]);
			}
		}
	}

	print(n);
}

int main() 
{
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	int n, m;
	cin>>n>>m;
	for (int i = 0; i < m; i++){
		int x, y, wt;
		cin>>x>>y>>wt;
		g[x][y] = wt;
	}
	floyd(n);
}

/*
input
5 11

1 2 3
1 3 4
1 4 2

2 3 1
2 5 2

3 4 2
3 5 3

4 1 9
4 5 1

5 2 8
5 4 5

Output
0 3 4 2 3 
12 0 1 3 2 
11 11 0 2 3 
9 9 10 0 1 
14 8 9 5 0 
*/