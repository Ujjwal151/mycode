//Segmented tree
//Query Optimization
#include<bits/stdc++.h>
using namespace std;
void init()
{
    ios_base::sync_with_stdio(0), cin.tie(0);
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
}
#define o(x) cout<<x<<"\n";
#define o2(x,y) cout<<x<<" "<<y<<"\n";
#define o3(x,y,z) cout<<x<<" "<<y<<" "<<z<<"\n";

const int arraysize = 100001;
int arr[arraysize];
vector<int> tree(4*arraysize);

void initial(int node, int b, int e){
    if(b == e){ tree[node] = arr[b]; return; }
    int left = node*2, right = left + 1, mid = (b+e)/2;
    initial(left,b,mid); initial(right,mid+1,e);
    tree[node] = tree[left] + tree[right];
}
void update(int node, int b, int e, int i, int newval){
    if(i < b || e < i) return;
    if(b == e){ tree[node] = newval; return;}
    int left = node*2, right = left + 1,mid = (b+e)/2;
    update(left,b,mid,i,newval); update(right,mid+1,e,i,newval);
    tree[node] = tree[left] + tree[right];
}
int query(int node, int b, int e, int i, int j){
    if(j < b || e < i) return 0;
    if(i <= b && e <= j) return tree[node];
    int left = node*2, right = left + 1, mid = (b+e)/2;
    return query(left,b,mid,i,j) + query(right,mid+1,e,i,j);
}

int32_t main()
{init();
    int n = 10; //cin >> n;
    for(int i = 1; i <=n; i++){
        // cin >> arr[i];
        arr[i] = i;
    }
    initial(1,1,n);
    cout<<query(1,1,n, 3, 6)<<"\n";
    update(1,1,n,6,0);
    cout<<query(1,1,n, 3, 6);   
}