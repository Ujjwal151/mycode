//Segmented tree [Lazy Propagation]
#include<bits/stdc++.h>
using namespace std;
void init()
{
    ios_base::sync_with_stdio(0), cin.tie(0);
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    #define o(x) cout<<x<<"\n";
    #define o2(x,y) cout<<x<<" "<<y<<"\n";
    #define o3(x,y,z) cout<<x<<" "<<y<<" "<<z<<"\n";
}

const int arraysize = 100005;
int arr[arraysize];
struct info{
    int sum, prop;
} tree[arraysize*4]; //(Internal = n-1, leaf = n, from_leaf_call = 2*n)

void initial(int node, int b, int e){
    if(b == e){ tree[node].sum = arr[b]; return; }
    int left = node*2, right = left + 1, mid = (b+e)/2;
    initial(left,b,mid); initial(right,mid+1,e);
    tree[node].sum = tree[left].sum + tree[right].sum;
}

void update(int node, int b, int e, int i, int j, int x)
{
    if(j < b || e < i) return;
    if(i <= b && e <= j){ 
        tree[node].sum += ((e-b+1)*(x));
        tree[node].prop += x;
        return;
    }
    int left = node*2, right = left + 1,mid = (b+e)/2;
    update(left,b,mid,i,j,x); update(right,mid+1,e,i,j,x);
    tree[node].sum = tree[left].sum + tree[right].sum + (e-b+1)*tree[node].prop;
}

int query(int node, int b, int e, int i, int j, int carry)
{
    if(j < b || e < i) return 0;
    if(i <= b && e <= j) return tree[node].sum + (e-b+1)*carry;
    int left = node*2, right = left + 1, mid = (b+e)/2;
    int q1 = query(left,b,mid,i,j,carry + tree[node].prop);
    int q2 = query(right,mid+1,e,i,j,carry + tree[node].prop);
    return q1 + q2;
}

int32_t main()
{init();
    int n; cin >> n;
    for(int i = 1; i <=n; i++){
        cin >> arr[i];
    }
    initial(1,1,n);
    cout<<query(1,1,n, 1, 7, 0)<<"\n"; //sum of index[1-7] with carry 0

    update(1,1,n,1,5,2); //increse index[1-5] by 2
    cout<<query(1,1,n,1,7,0)<<"\n"; //sum of index[1-7] with carry 0
    
    update(1,1,n,2,5,3); //increse index[2-5] by 3
    cout<<query(1,1,n,3,7,0)<<"\n"; //sum of index[3-7] with carry 0
}
/*
Input
7
4 -9 3 7 1 0 2

Output
8
18
28
*/