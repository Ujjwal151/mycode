//Segmented tree [Lazy Propagation]
#include<bits/stdc++.h>
using namespace std;
void init()
{
    ios_base::sync_with_stdio(0), cin.tie(0);
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    #define o(x) cout<<x<<"\n";
    #define o2(x,y) cout<<x<<" "<<y<<"\n";
    #define o3(x,y,z) cout<<x<<" "<<y<<" "<<z<<"\n";
    #define o4(x,y,z,w) cout<<x<<" "<<y<<" "<<z<<" "<<w<<"\n";
}

const int arraysize = 100005;
int arr[arraysize];
struct info{
    int s1,s2,s3, prop, carry;
} tree[arraysize*4]; //(Internal = n-1, leaf = n, from_leaf_call = 2*n)

void initial(int node, int b, int e){
    if(b == e){
        tree[node].s3 = 1;
        // tree[node].prop = 1;
        // tree[node].s1 = tree[node].s2 = 0;
        return; 
    }
    int left = node*2, right = left + 1, mid = (b+e)/2;
    initial(left,b,mid); initial(right,mid+1,e);
    tree[node].s3 = tree[left].s3 + tree[right].s3;
    // tree[node].s1 = tree[left].s1 + tree[right].s1;
    // tree[node].s2 = tree[left].s2 + tree[right].s2;
}

void update(int node, int b, int e, int i, int j)
{
    if(j < b || e < i) return;
    if(i <= b && e <= j){
        tree[node].prop++;
        swap(tree[node].s1, tree[node].s2);
        swap(tree[node].s1, tree[node].s3);
        return;
    }

    int left = node*2, right = left + 1,mid = (b+e)/2;
    update(left,b,mid,i,j); update(right,mid+1,e,i,j);

    tree[node].s1 = tree[left].s1 + tree[right].s1;
    tree[node].s2 = tree[left].s2 + tree[right].s2;
    tree[node].s3 = tree[left].s3 + tree[right].s3;
    int PP = tree[node].prop % 3;
    for(int loop = 0; loop < PP; loop++){
        swap(tree[node].s1,tree[node].s2);
        swap(tree[node].s1,tree[node].s3);
    }
}

int query(int node, int b, int e, int i, int j, int carry)
{
    if(j < b || e < i) return 0;
    if(i <= b && e <= j){
        int PP = (carry) % 3;
        switch(PP){
            case 0: return tree[node].s3;
            case 1: return tree[node].s2;
            case 2: return tree[node].s1;
        }
    } 
    
    int left = node*2, right = left + 1, mid = (b+e)/2;

    int q1 = query(left,b,mid, i, j, carry + tree[node].prop);
    int q2 = query(right,mid+1,e,i,j,carry + tree[node].prop);
    return q1 + q2;
}

int32_t main()
{init();
    int n, q; scanf("%d %d", &n, &q);
    initial(1,1,n);
    while(q--)
    {
        int type, i, j; 
        scanf("%d %d %d",&type, &i, &j);
        if(type) cout << query(1,1,n, i+1, j+1, 0)<<"\n";// << " "<< q << "\n";
        else update(1,1,n, i+1, j+1);
    }   
    // cout<<tree[1].s3<<"\n";
    // for(int i = 1; i<=15; i++){
    //     o4(tree[i].s1, tree[i].s2, tree[i].s3, tree[i].prop);
    // }
    return 0;
}
/*
Input
4 7
1 0 3
0 1 2
0 1 3
1 0 0
0 0 3
1 3 3
1 0 3

Output
4
1
0
2

*/