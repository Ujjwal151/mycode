// https://www.codingninjas.com/studio/problems/cut-into-segments_1214651
// Cut into segments
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
int dp[100005];//1e5+5
int solve(int n, int x, int y, int z)
{
    if(n == 0) return 0;
    if(n < 0) return INT_MIN;
    if(dp[n] != -1) return dp[n];
    int value1 = 1 + solve(n-x, x, y, z);
    int value2 = 1 + solve(n-y, x, y, z);
    int value3 = 1 + solve(n-z, x, y, z);
    return dp[n] = max(value1,max(value2,value3));
}

int solveTab(int n, int x, int y, int z)
{
    vector<int> dp(n+1, INT_MIN);
    dp[0] = 0;
    for(int i = 1; i<=n; i++){
        if(i-x >= 0) dp[i] = max(dp[i], dp[i-x] + 1); 
        if(i-y >= 0) dp[i] = max(dp[i], dp[i-y] + 1); 
        if(i-z >= 0) dp[i] = max(dp[i], dp[i-z] + 1); 
    }
    return dp[n];
}

int solveTab2(int n, int x, int y, int z)
{
    vector<int> dp(n+1, -1);
    dp[0] = 0;
    for(int i = 1; i<=n; i++){
        if(i-x >= 0 && dp[i-x] != -1) dp[i] = max(dp[i], dp[i-x] + 1); 
        if(i-y >= 0 && dp[i-y] != -1) dp[i] = max(dp[i], dp[i-y] + 1); 
        if(i-z >= 0 && dp[i-z] != -1) dp[i] = max(dp[i], dp[i-z] + 1); 
    }
    return dp[n];
}

int solveOpt(int n, int x, int y, int z)
{
    vector<int> dp(n+1, INT_MIN);
    dp[0] = 0;
    for(int i = 1; i<=n; i++){
        if(i-x >= 0) dp[i] = max(dp[i], dp[i-x] + 1); 
        if(i-y >= 0) dp[i] = max(dp[i], dp[i-y] + 1); 
        if(i-z >= 0) dp[i] = max(dp[i], dp[i-z] + 1); 
    }
    return dp[n];
}

int cutSegments(int n, int x, int y, int z) {
    // memset(dp,-1,sizeof(dp));
    // int ans = solve(n,x,y,z);
    // int ans = solveTab(n,x,y,z);
    int ans = solveTab2(n,x,y,z);

    if(ans < 0) return 0;
    else return ans;
}

int main()
{ 
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    int n = 7, x = 5, y = 2, z = 3;
    // cin >> n >> x >> y >> z;
    cout<<cutSegments(n,x,y,z);
}
