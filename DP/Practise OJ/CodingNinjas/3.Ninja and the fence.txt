//https://www.codingninjas.com/studio/problem-details/ninja-and-the-fence_3210208
//Ninja And The Fence

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int MOD = 1000000007;

int dp[100005];//1e5+5
int solve(int n, int k)
{
    if(dp[n] != -1) return dp[n];
    if(n == 1) return dp[n] = k;
    if(n == 2) return dp[n] = (1LL*k*k)%MOD;
    //f(n) = f(n-1)*(k-1) + f(n-2)*(k-1);
    int mul = ( 0LL + solve(n-1, k) + solve(n-2, k) )%MOD;
    return dp[n] = (1LL * (k-1) * mul ) % MOD;
}

int solveTab(int n, int k)
{
    vector<int>dp(n+1);
    dp[1] = k, dp[2] = (1LL * k * k )%MOD;

    for(int i = 3; i<=n; i++){
        int mul = ( 0LL + dp[i-1] + dp[i-2] )%MOD;
        dp[i] = (1LL * (k-1) * mul ) % MOD;
    }
    return dp[n];
}


int solveOpt(int n, int k)
{
    int prev2 = k, prev1 = (1LL * k * k )%MOD;
    if(n == 1) return prev2;
    if(n == 2) return prev1;

    for(int i = 3; i<=n; i++){
        int mul = ( 0LL + prev1 + prev2 )%MOD;
        int cur = (1LL * (k-1) * mul ) % MOD;
        prev2 = prev1, prev1 = cur;
    }
    return prev1;
}

int numberOfWays(int n, int k) {
    memset(dp,-1,sizeof(dp));
    return solve(n,k);
    // return solveTab(n,k);
    // return solveOpt(n,k);
}

int main()
{ 
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    int n = 4, k = 2;
    cout<<numberOfWays(n, k);
}
