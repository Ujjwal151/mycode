//Number of distinct way to climb on stairs by either 1 or 2 steps.
//746. Min Cost Climbing Stairs
//https://leetcode.com/problems/min-cost-climbing-stairs/
#include <bits/stdc++.h>
using namespace std;
const int N = 10000007;
vector<int> dp(N,-1);
// 0 1 2 3 4 5  6  7  8  9  10
// 1 1 2 3 5 8 13 21 34 55  89
int minCostStairRec(int n,vector<int>& cost){
    //base case
    if(n == 1 || n == 0) return 0;
    //dp direct retrun
    if(dp[n] != -1) return dp[n];
    //memoization
    return dp[n] = min(minCostStairRec(n-1,cost) + cost[n-1] , minCostStairRec(n-2,cost) + cost[n-2]);
}

int minCostStairIter(vector<int>& cost){
    int n = cost.size();
    //base case initialization
    dp[0] = 0, dp[1] = 0;
    //Iteration
    for(int i = 2; i<=n; i++){
        dp[i] = min(dp[i-1]+cost[i-1], dp[i-2]+cost[i-2]);
    }
    //Return
    return dp[n];
}

int minCostStairSpOpt(vector<int>& cost){
    int n = cost.size();
    //base case initialization
    int p1 = 0, p2 = 0, cur;
    //Iteration
    for(int i = 2; i<=n; i++){     
        cur = min(p1+cost[i-1], p2+cost[i-2]);
        p2 = p1;
        p1 = cur;
    }
    return p1;
}

int main()
{ 
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout); 
    //                0   1   2   3   4
    vector<int> cost{12, 18, 10, 15, 20};
    int n = cost.size(); // n = 5
    cout<<minCostStairRec(n, cost)<<"\n";
    cout<<minCostStairIter(cost)<<"\n";
    cout<<minCostStairSpOpt(cost)<<"\n";
}
